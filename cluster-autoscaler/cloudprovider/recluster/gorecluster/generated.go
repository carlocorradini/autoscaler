// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gorecluster

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// Node includes the requested fields of the GraphQL type Node.
// The GraphQL type's documentation follows.
//
// Node
type Node struct {
	// Node identifier
	ID string `json:"ID"`
	// Node status
	Status Status `json:"status"`
}

// GetID returns Node.ID, and is useful for accessing the field via an interface.
func (v *Node) GetID() string { return v.ID }

// GetStatus returns Node.Status, and is useful for accessing the field via an interface.
func (v *Node) GetStatus() Status { return v.Status }

// NodePool includes the requested fields of the GraphQL type NodePool.
// The GraphQL type's documentation follows.
//
// Node pool
type NodePool struct {
	// Node pool identifier
	ID string `json:"ID"`
	// Node pool name
	Name string `json:"name"`
	// Node pool auto scale flag
	AutoScale bool `json:"autoScale"`
	// Node pool node count
	Count int `json:"count"`
	// Node pool minimum number of nodes
	MinNodes int `json:"minNodes"`
	// Node pool maximum number of nodes
	MaxNodes int `json:"maxNodes"`
	// Node pool nodes
	Nodes []Node `json:"nodes"`
	// Creation timestamp
	CreatedAt int64 `json:"createdAt"`
	// Update timestamp
	UpdatedAt int64 `json:"updatedAt"`
}

// GetID returns NodePool.ID, and is useful for accessing the field via an interface.
func (v *NodePool) GetID() string { return v.ID }

// GetName returns NodePool.Name, and is useful for accessing the field via an interface.
func (v *NodePool) GetName() string { return v.Name }

// GetAutoScale returns NodePool.AutoScale, and is useful for accessing the field via an interface.
func (v *NodePool) GetAutoScale() bool { return v.AutoScale }

// GetCount returns NodePool.Count, and is useful for accessing the field via an interface.
func (v *NodePool) GetCount() int { return v.Count }

// GetMinNodes returns NodePool.MinNodes, and is useful for accessing the field via an interface.
func (v *NodePool) GetMinNodes() int { return v.MinNodes }

// GetMaxNodes returns NodePool.MaxNodes, and is useful for accessing the field via an interface.
func (v *NodePool) GetMaxNodes() int { return v.MaxNodes }

// GetNodes returns NodePool.Nodes, and is useful for accessing the field via an interface.
func (v *NodePool) GetNodes() []Node { return v.Nodes }

// GetCreatedAt returns NodePool.CreatedAt, and is useful for accessing the field via an interface.
func (v *NodePool) GetCreatedAt() int64 { return v.CreatedAt }

// GetUpdatedAt returns NodePool.UpdatedAt, and is useful for accessing the field via an interface.
func (v *NodePool) GetUpdatedAt() int64 { return v.UpdatedAt }

// NodePoolsResponse is returned by NodePools on success.
type NodePoolsResponse struct {
	// List of Node pools
	NodePools []NodePool `json:"nodePools"`
}

// GetNodePools returns NodePoolsResponse.NodePools, and is useful for accessing the field via an interface.
func (v *NodePoolsResponse) GetNodePools() []NodePool { return v.NodePools }

// Node statuses
type NodeStatusEnum string

const (
	// Node is active
	NodeStatusEnumActive NodeStatusEnum = "ACTIVE"
	// Node is active and delete
	NodeStatusEnumActiveDelete NodeStatusEnum = "ACTIVE_DELETE"
	// Node is active but not healthy and is not accepting pods
	NodeStatusEnumActiveNotReady NodeStatusEnum = "ACTIVE_NOT_READY"
	// Node is active, healthy and ready to accept pods
	NodeStatusEnumActiveReady NodeStatusEnum = "ACTIVE_READY"
	// Node is booting
	NodeStatusEnumBooting NodeStatusEnum = "BOOTING"
	// Node is inactive
	NodeStatusEnumInactive NodeStatusEnum = "INACTIVE"
	// Unknown
	NodeStatusEnumUnknown NodeStatusEnum = "UNKNOWN"
)

// Status includes the requested fields of the GraphQL type Status.
// The GraphQL type's documentation follows.
//
// Status
type Status struct {
	// Status
	Status NodeStatusEnum `json:"status"`
	// Status message
	Message string `json:"message"`
}

// GetStatus returns Status.Status, and is useful for accessing the field via an interface.
func (v *Status) GetStatus() NodeStatusEnum { return v.Status }

// GetMessage returns Status.Message, and is useful for accessing the field via an interface.
func (v *Status) GetMessage() string { return v.Message }

// UnassignNodeResponse is returned by UnassignNode on success.
type UnassignNodeResponse struct {
	// Unassign node from node pool
	UnassignNode Node `json:"unassignNode"`
}

// GetUnassignNode returns UnassignNodeResponse.UnassignNode, and is useful for accessing the field via an interface.
func (v *UnassignNodeResponse) GetUnassignNode() Node { return v.UnassignNode }

// Update Node pool input
type UpdateNodePoolInput struct {
	// Node pool auto scale flag
	AutoScale bool `json:"autoScale,omitempty"`
	// Node pool node count
	Count uint `json:"count,omitempty"`
	// Node pool minimum number of nodes
	MinNodes uint `json:"minNodes,omitempty"`
	// Node pool name
	Name string `json:"name,omitempty"`
}

// GetAutoScale returns UpdateNodePoolInput.AutoScale, and is useful for accessing the field via an interface.
func (v *UpdateNodePoolInput) GetAutoScale() bool { return v.AutoScale }

// GetCount returns UpdateNodePoolInput.Count, and is useful for accessing the field via an interface.
func (v *UpdateNodePoolInput) GetCount() uint { return v.Count }

// GetMinNodes returns UpdateNodePoolInput.MinNodes, and is useful for accessing the field via an interface.
func (v *UpdateNodePoolInput) GetMinNodes() uint { return v.MinNodes }

// GetName returns UpdateNodePoolInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateNodePoolInput) GetName() string { return v.Name }

// UpdateNodePoolResponse is returned by UpdateNodePool on success.
type UpdateNodePoolResponse struct {
	// Update Node pool
	UpdateNodePool NodePool `json:"updateNodePool"`
}

// GetUpdateNodePool returns UpdateNodePoolResponse.UpdateNodePool, and is useful for accessing the field via an interface.
func (v *UpdateNodePoolResponse) GetUpdateNodePool() NodePool { return v.UpdateNodePool }

// __UnassignNodeInput is used internally by genqlient
type __UnassignNodeInput struct {
	Id string `json:"id,omitempty"`
}

// GetId returns __UnassignNodeInput.Id, and is useful for accessing the field via an interface.
func (v *__UnassignNodeInput) GetId() string { return v.Id }

// __UpdateNodePoolInput is used internally by genqlient
type __UpdateNodePoolInput struct {
	Id    string              `json:"id,omitempty"`
	Input UpdateNodePoolInput `json:"input,omitempty"`
}

// GetId returns __UpdateNodePoolInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateNodePoolInput) GetId() string { return v.Id }

// GetInput returns __UpdateNodePoolInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateNodePoolInput) GetInput() UpdateNodePoolInput { return v.Input }

func NodePools(
	ctx context.Context,
	client graphql.Client,
) (*NodePoolsResponse, error) {
	req := &graphql.Request{
		OpName: "NodePools",
		Query: `
query NodePools {
	nodePools {
		ID: id
		name
		autoScale
		count
		minNodes
		maxNodes
		nodes(where: {nodePoolAssigned:{equals:true}}) {
			ID: id
			status {
				status
				message
			}
		}
		createdAt
		updatedAt
	}
}
`,
	}
	var err error

	var data NodePoolsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UnassignNode(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*UnassignNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UnassignNode",
		Query: `
mutation UnassignNode ($id: ID!) {
	unassignNode(id: $id) {
		ID: id
		status {
			status
			message
		}
	}
}
`,
		Variables: &__UnassignNodeInput{
			Id: id,
		},
	}
	var err error

	var data UnassignNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateNodePool(
	ctx context.Context,
	client graphql.Client,
	id string,
	input UpdateNodePoolInput,
) (*UpdateNodePoolResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateNodePool",
		Query: `
mutation UpdateNodePool ($id: ID!, $input: UpdateNodePoolInput!) {
	updateNodePool(id: $id, data: $input) {
		ID: id
		name
		autoScale
		count
		minNodes
		maxNodes
		nodes(where: {nodePoolAssigned:{equals:true}}) {
			ID: id
			status {
				status
				message
			}
		}
		createdAt
		updatedAt
	}
}
`,
		Variables: &__UpdateNodePoolInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data UpdateNodePoolResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
